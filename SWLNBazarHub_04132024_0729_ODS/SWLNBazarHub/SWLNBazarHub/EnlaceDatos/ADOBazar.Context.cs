//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SWLNBazarHub.EnlaceDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBBazar2Entities : DbContext
    {
        public DBBazar2Entities()
            : base("name=DBBazar2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Categorias> Categorias { get; set; }
        public virtual DbSet<DetallesPedido> DetallesPedido { get; set; }
        public virtual DbSet<DireccionesEnvio> DireccionesEnvio { get; set; }
        public virtual DbSet<Pedidos> Pedidos { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<Proveedores> Proveedores { get; set; }
        public virtual DbSet<TipoUsuario> TipoUsuario { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual int spActualizarDetallePedido(Nullable<int> detalleID, Nullable<int> cantidad, Nullable<decimal> precioUnitario, Nullable<decimal> descuento, string estado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var detalleIDParameter = detalleID.HasValue ?
                new ObjectParameter("DetalleID", detalleID) :
                new ObjectParameter("DetalleID", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var precioUnitarioParameter = precioUnitario.HasValue ?
                new ObjectParameter("PrecioUnitario", precioUnitario) :
                new ObjectParameter("PrecioUnitario", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarDetallePedido", detalleIDParameter, cantidadParameter, precioUnitarioParameter, descuentoParameter, estadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarDireccionEnvio(Nullable<int> direccionID, string direccion, string ciudad, string pais, string codigoPostal, string registroEstado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var direccionIDParameter = direccionID.HasValue ?
                new ObjectParameter("DireccionID", direccionID) :
                new ObjectParameter("DireccionID", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var registroEstadoParameter = registroEstado != null ?
                new ObjectParameter("RegistroEstado", registroEstado) :
                new ObjectParameter("RegistroEstado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarDireccionEnvio", direccionIDParameter, direccionParameter, ciudadParameter, paisParameter, codigoPostalParameter, registroEstadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarEstadoDetallePedido(Nullable<int> detalleID, string estado)
        {
            var detalleIDParameter = detalleID.HasValue ?
                new ObjectParameter("DetalleID", detalleID) :
                new ObjectParameter("DetalleID", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarEstadoDetallePedido", detalleIDParameter, estadoParameter);
        }
    
        public virtual int spActualizarEstadoDireccionEnvio(Nullable<int> direccionID, string registroEstado)
        {
            var direccionIDParameter = direccionID.HasValue ?
                new ObjectParameter("DireccionID", direccionID) :
                new ObjectParameter("DireccionID", typeof(int));
    
            var registroEstadoParameter = registroEstado != null ?
                new ObjectParameter("RegistroEstado", registroEstado) :
                new ObjectParameter("RegistroEstado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarEstadoDireccionEnvio", direccionIDParameter, registroEstadoParameter);
        }
    
        public virtual int spActualizarEstadoProducto(Nullable<int> productoID, string estado)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarEstadoProducto", productoIDParameter, estadoParameter);
        }
    
        public virtual int spActualizarEstadoTipoUsuario(Nullable<int> tipoUsuarioID, string estado)
        {
            var tipoUsuarioIDParameter = tipoUsuarioID.HasValue ?
                new ObjectParameter("TipoUsuarioID", tipoUsuarioID) :
                new ObjectParameter("TipoUsuarioID", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarEstadoTipoUsuario", tipoUsuarioIDParameter, estadoParameter);
        }
    
        public virtual int spActualizarEstadoUsuario(Nullable<int> usuarioID, string estado)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarEstadoUsuario", usuarioIDParameter, estadoParameter);
        }
    
        public virtual int spActualizarFechaEdicionDetallePedido(Nullable<int> detalleID, Nullable<System.DateTime> fechaDeEdicion)
        {
            var detalleIDParameter = detalleID.HasValue ?
                new ObjectParameter("DetalleID", detalleID) :
                new ObjectParameter("DetalleID", typeof(int));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarFechaEdicionDetallePedido", detalleIDParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarFechaEdicionDireccionEnvio(Nullable<int> direccionID, Nullable<System.DateTime> fechaDeEdicion)
        {
            var direccionIDParameter = direccionID.HasValue ?
                new ObjectParameter("DireccionID", direccionID) :
                new ObjectParameter("DireccionID", typeof(int));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarFechaEdicionDireccionEnvio", direccionIDParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarFechaEdicionProducto(Nullable<int> productoID, Nullable<System.DateTime> fechaDeEdicion)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarFechaEdicionProducto", productoIDParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarFechaEdicionTipoUsuario(Nullable<int> tipoUsuarioID, Nullable<System.DateTime> fechaDeEdicion)
        {
            var tipoUsuarioIDParameter = tipoUsuarioID.HasValue ?
                new ObjectParameter("TipoUsuarioID", tipoUsuarioID) :
                new ObjectParameter("TipoUsuarioID", typeof(int));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarFechaEdicionTipoUsuario", tipoUsuarioIDParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarFechaEdicionUsuario(Nullable<int> usuarioID, Nullable<System.DateTime> fechaDeEdicion)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarFechaEdicionUsuario", usuarioIDParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarProducto(Nullable<int> productoID, string nombre, string descripcion, Nullable<decimal> precio, Nullable<int> stock, string estado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarProducto", productoIDParameter, nombreParameter, descripcionParameter, precioParameter, stockParameter, estadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarTipoUsuario(Nullable<int> tipoUsuarioID, string nombre, string estado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var tipoUsuarioIDParameter = tipoUsuarioID.HasValue ?
                new ObjectParameter("TipoUsuarioID", tipoUsuarioID) :
                new ObjectParameter("TipoUsuarioID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarTipoUsuario", tipoUsuarioIDParameter, nombreParameter, estadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spActualizarUsuario(Nullable<int> usuarioID, string nombre, string email, string contraseña, string estado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarUsuario", usuarioIDParameter, nombreParameter, emailParameter, contraseñaParameter, estadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spAgregarDetallePedido(Nullable<int> pedidoID, Nullable<int> productoID, Nullable<int> cantidad, Nullable<decimal> precioUnitario, Nullable<decimal> descuento, string estado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var pedidoIDParameter = pedidoID.HasValue ?
                new ObjectParameter("PedidoID", pedidoID) :
                new ObjectParameter("PedidoID", typeof(int));
    
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var precioUnitarioParameter = precioUnitario.HasValue ?
                new ObjectParameter("PrecioUnitario", precioUnitario) :
                new ObjectParameter("PrecioUnitario", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarDetallePedido", pedidoIDParameter, productoIDParameter, cantidadParameter, precioUnitarioParameter, descuentoParameter, estadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spAgregarDireccionEnvio(Nullable<int> usuarioID, string direccion, string ciudad, string pais, string codigoPostal, string registroEstado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var registroEstadoParameter = registroEstado != null ?
                new ObjectParameter("RegistroEstado", registroEstado) :
                new ObjectParameter("RegistroEstado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarDireccionEnvio", usuarioIDParameter, direccionParameter, ciudadParameter, paisParameter, codigoPostalParameter, registroEstadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spAgregarProducto(string nombre, string descripcion, Nullable<decimal> precio, Nullable<int> stock, Nullable<int> categoriaID, Nullable<int> proveedorID, string estado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            var categoriaIDParameter = categoriaID.HasValue ?
                new ObjectParameter("CategoriaID", categoriaID) :
                new ObjectParameter("CategoriaID", typeof(int));
    
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarProducto", nombreParameter, descripcionParameter, precioParameter, stockParameter, categoriaIDParameter, proveedorIDParameter, estadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spAgregarTipoUsuario(string nombre, string estado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarTipoUsuario", nombreParameter, estadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual int spAgregarUsuario(string nombre, string email, string contraseña, Nullable<int> tipoUsuarioID, string estado, Nullable<System.DateTime> fechaDeEdicion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var tipoUsuarioIDParameter = tipoUsuarioID.HasValue ?
                new ObjectParameter("TipoUsuarioID", tipoUsuarioID) :
                new ObjectParameter("TipoUsuarioID", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaDeEdicionParameter = fechaDeEdicion.HasValue ?
                new ObjectParameter("FechaDeEdicion", fechaDeEdicion) :
                new ObjectParameter("FechaDeEdicion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarUsuario", nombreParameter, emailParameter, contraseñaParameter, tipoUsuarioIDParameter, estadoParameter, fechaDeEdicionParameter);
        }
    
        public virtual ObjectResult<spObtenerTodosProductos_Result> spObtenerTodosProductos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerTodosProductos_Result>("spObtenerTodosProductos");
        }
    
        public virtual ObjectResult<spObtenerTodosTipoUsuario_Result> spObtenerTodosTipoUsuario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerTodosTipoUsuario_Result>("spObtenerTodosTipoUsuario");
        }
    
        public virtual ObjectResult<spObtenerTodosUsuarios_Result> spObtenerTodosUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerTodosUsuarios_Result>("spObtenerTodosUsuarios");
        }
    }
}
